name: (R) Update package.json

on:
  workflow_call:
    inputs:
      file-path:
        description: "package.json path to update. You can input multiline paths. Supported files are `package.json`, `plugin.cfg` and `Directory.Build.props`"
        required: true
        type: string
      ref:
        description: "checkout ref"
        required: false
        type: string
        default: ''
      require-validation:
        description: "true require validation must pass, false to keep going even validation failed."
        required: false
        type: boolean
        default: true
      tag:
        description: "git tag you want create. (sample 1.0.0)"
        required: true
        type: string
      dry-run:
        description: "true to simularate commit but not push change."
        required: true
        type: boolean
      dotnet-run-path:
        description: "dotnet run path, executable should output desired change. (sample: src/Foo/Bar.csproj)"
        required: false
        type: string
        default: ''
      # TODO: Obsolete, this field can be removed after reference removed.
      push-tag:
        description: "true = push tag. false = no push tag."
        required: false
        type: boolean
        default: true
    outputs:
      sha:
        description: "Git commit sha after package.json has changed."
        value: ${{ jobs.update-packagejson.outputs.sha }}
      branch-name:
        description: Git branch name created.
        value: ${{ jobs.update-packagejson.outputs.branch-name }}
      is-branch-created:
        description: Indicate is Git branch created or not.
        value: ${{ jobs.update-packagejson.outputs.is-branch-created }}

jobs:
  validate:
    uses: Cysharp/Actions/.github/workflows/validate-tag.yaml@main
    with:
      tag: ${{ inputs.tag }}
      require-validation: ${{ inputs.require-validation }}
    secrets: inherit

  update-packagejson:
    needs: [validate]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      sha: ${{ steps.update.outputs.sha }}
      branch-name: ${{ steps.configure.outputs.branch-name }}
      is-branch-created: ${{ steps.update.outputs.is-branch-created }}
    steps:
      - name: Configure Output variables
        id: configure
        run: |
          echo "branch-name=test-release/${{ inputs.tag }}" | tee -a "$GITHUB_OUTPUT"

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - uses: Cysharp/Actions/.github/actions/setup-dotnet@main

      # dotnet run
      - uses: Cysharp/Actions/.github/actions/setup-dotnet@main
        if: ${{ inputs.dotnet-run-path != '' }}
      - name: Execute dotnet run with --version ${{ needs.validate.outputs.normalized_tag }}
        run: |
          while read -r file_path; do
            if [[ "$file_path" == "" ]]; then continue; fi
            echo "Start $file_path"
            echo "::group::Execute"
              dotnet run --project "$file_path" -- --version "${{ needs.validate.outputs.normalized_tag }}"
            echo "::endgroup::"
          done <<< "${{ inputs.dotnet-run-path }}"
        if: ${{ inputs.dotnet-run-path != '' }}

      # package.json
      # "version": 1.2.3 -> "version": 2.0.0
      # plugin.cfg
      # version="1.2.3" -> version="2.0.0"
      #
      # TIPS: Converting file-oath from \n to ,
      - name: Update files to version ${{ needs.validate.outputs.normalized_tag }}
        id: update
        run: |
          file_path_csv=$(echo "${{ inputs.file-path }}" | tr '\n' ',' | sed 's/,$/\n/')
          echo "file_path_csv: $file_path_csv"
          dotnet run --project "./src/Actions/Actions.csproj" -- update-version --version "${{ needs.validate.outputs.normalized_tag }}" --paths "${file_path_csv}"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Push changes
        if: ${{ steps.update.outputs.commited == '1' }}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} # auto generated token
          branch: ${{ inputs.ref }}
          tags: false
          force: ${{ inputs.dry-run }}
