name: (R) Create Release

on:
  workflow_dispatch:
    inputs:
      commit-id:
        description: "commit-id: CommitId to create release & tag."
        required: false
        type: string
      dry-run:
        description: "dry-run: true = no upload. false = dry run changes && delete release after 60s."
        required: true
        type: boolean
      require-validation:
        description: "require-validation: true require validation must pass, false to keep going even validation failed."
        required: false
        type: boolean
        default: true
      tag:
        description: "tag: Git tag to create. (sample 1.0.0)"
        required: true
        type: string
      # nuget
      nuget-push:
        description: "nuget-push: true = upload nuget package. false = not upload"
        required: false
        type: boolean
        default: false
      # release
      release-asset-path:
        description: "release assets path to upload. This is a list of paths separated by a newline."
        required: false
        type: string
      release-format: # see: https://docs.github.com/en/actions/learn-github-actions/expressions#format
        description: "release-format: if 'Ver.{0}' is specified, the release title will be 'Ver.1.0.0'. set '{0}' if no prefix is preferred."
        required: false
        type: string
        default: 'v.{0}'
      release-upload:
        description: "release-upload: true = upload assets. false = not upload"
        required: false
        type: boolean
        default: false
  workflow_call:
    inputs:
      commit-id:
        description: "CommitId to create release & tag."
        required: true
        type: string
      dry-run:
        description: "true = no upload. false = dry run changes && delete release after 60s."
        required: true
        type: boolean
      require-validation:
        description: "true require validation must pass, false to keep going even validation failed."
        required: false
        type: boolean
        default: true
      tag:
        description: "Git tag to create. (sample 1.0.0)"
        required: true
        type: string
      # nuget
      nuget-path:
        description: "nuget path to upload."
        required: false
        type: string
        default: |
          ./nuget/*.nupkg
          ./nuget/*.snupkg
      nuget-push:
        description: "true = upload nuget package. false = not upload"
        required: false
        type: boolean
        default: false
      # release
      release-asset-path:
        description: "release assets path to upload. This is a list of paths separated by a newline."
        required: false
        type: string
      release-format: # see: https://docs.github.com/en/actions/learn-github-actions/expressions#format
        description: "Release format. (if 'Ver.{0}' is specified, the release title will be 'Ver.1.0.0'. set '{0}' if no prefix is preferred.)"
        required: false
        type: string
        default: 'v.{0}'
      release-upload:
        description: "true = upload assets. false = not upload"
        required: false
        type: boolean
        default: false

permissions:
  contents: write # required for creating release
  pull-requests: write

jobs:
  create-release:
    name: Create Release
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # auto generated token
      GH_REPO: ${{ github.repository }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Validate inputs - unitypackage
        shell: bash
        if: ${{ inputs.release-upload && inputs.release-asset-path == '' }}
        run: |
          echo "Validation error! 'inputs.release-asset-path' cannot be blank when 'inputs.release-upload' is true."
          exit 1

      - name: Load secrets
        id: op-load-secret
        uses: 1password/load-secrets-action@v2
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN_PUBLIC }}
          NUGET_KEY: "op://GitHubActionsPublic/NUGET_KEY/credential"

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit-id }}
      - uses: Cysharp/Actions/.github/actions/setup-dotnet@main
        if: ${{ inputs.nuget-push }}

      # validate
      - name: Validate and normalize tag
        id: validate
        run: dotnet run --project "./src/Actions/Actions.csproj" -- validate-tag --tag "${{ inputs.tag }}" ${{ inputs.require-validation && '--require-validation' || '' }}
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Download(All) Artifacts to current directory
      - uses: Cysharp/Actions/.github/actions/download-artifact@main
      - name: Show download aritifacts
        run: ls -lR
      - name: Validate package exists in artifact - release assets
        if: ${{ inputs.release-upload }}
        run: |
          while read -r asset_path; do
            dotnet run --project "./src/Actions/Actions.csproj" -- validate-file-exists --path-pattern "$asset_path"
          done <<< "${{ inputs.release-asset-path }}"
      - name: Validate package exists in artifact - NuGet
        if: ${{ inputs.nuget-push }}
        run: |
          while read -r nuget_path; do
            dotnet run --project "./src/Actions/Actions.csproj" -- validate-nupkg-exists --path-pattern "$nuget_path"
          done <<< "${{ inputs.nuget-path }}"

      # Create Releases
      - name: Create Tag
        run: |
          git tag ${{ inputs.tag }}
          git push origin ${{ inputs.tag }}
      - name: Create Release
        run: gh release create ${{ inputs.tag }} --draft --verify-tag --title "${{ format(inputs.release-format, inputs.tag) }}" --generate-notes
      - name: Wait and Verify Release Name is expected
        run: |
          sleep 5s
          actual=$(gh api --paginate /repos/${{ github.repository }}/releases?per_page=100 --jq '.[] | select(.tag_name == "${{ inputs.tag }}") | .name')
          expected="${{ format(inputs.release-format, inputs.tag) }}"
          if [[ "$actual" != "$expected" ]]; then
            echo "Release name is not as expected. expected: $expected, actual: $actual"
            exit 1
          else
            echo "Release name is expected! expected: $expected, actual: $actual"
          fi
      - name: Upload asset files to release
        run: |
          while read -r asset_path; do
            if [[ "${asset_path}" == "" ]]; then continue; fi
            # is it a wildcard?
            # shellcheck disable=SC2086
            if [[ "$asset_path" == *\** || "$asset_path" == *\?* ]]; then
              for file in ${asset_path}; do
                gh release upload ${{ inputs.tag }} "${file}"
              done
              continue
            fi
            # is it a file?
            gh release upload ${{ inputs.tag }} "${asset_path}"
          done <<< "${{ inputs.release-asset-path }}"
        if: ${{ inputs.release-upload }}

      # Upload to NuGet
      - name: Upload to NuGet (DryRun=${{ inputs.dry-run }})
        if: ${{ inputs.nuget-push }}
        run: |
          while read -r nuget_path; do
            if [[ "$nuget_path" == "" ]]; then continue; fi
            # shellcheck disable=SC2086
            if ! ls -l ${nuget_path} >/dev/null 2>&1;then
              echo "skipping nuget push, $nuget_path not found."
              continue
            fi

            if [[ "${{ inputs.dry-run }}" == "true" ]]; then
              echo "(dry run) dotnet nuget push \"${nuget_path}\" --skip-duplicate -s https://api.nuget.org/v3/index.json -k \"${{ steps.op-load-secret.outputs.NUGET_KEY }}\""
            else
              dotnet nuget push "${nuget_path}" --skip-duplicate -s https://api.nuget.org/v3/index.json -k "${{ steps.op-load-secret.outputs.NUGET_KEY }}"
            fi
          done <<< "${{ inputs.nuget-path }}"

      # Clean up
      - name: Clean up. Wait 60s and delete release if dry-run or failure. (dry-run=${{ inputs.dry-run }}})
        if: ${{ inputs.dry-run || failure() }}
        run: |
          if gh release list | grep Draft | grep ${{ inputs.tag }}; then
            sleep 60
            gh release delete ${{ inputs.tag }} --yes --cleanup-tag
          fi
